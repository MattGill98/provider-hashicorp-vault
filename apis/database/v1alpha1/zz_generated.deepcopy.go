//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CassandraObservation) DeepCopyInto(out *CassandraObservation) {
	*out = *in
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProtocolVersion != nil {
		in, out := &in.ProtocolVersion, &out.ProtocolVersion
		*out = new(float64)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CassandraObservation.
func (in *CassandraObservation) DeepCopy() *CassandraObservation {
	if in == nil {
		return nil
	}
	out := new(CassandraObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CassandraParameters) DeepCopyInto(out *CassandraParameters) {
	*out = *in
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PemBundleSecretRef != nil {
		in, out := &in.PemBundleSecretRef, &out.PemBundleSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PemJSONSecretRef != nil {
		in, out := &in.PemJSONSecretRef, &out.PemJSONSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProtocolVersion != nil {
		in, out := &in.ProtocolVersion, &out.ProtocolVersion
		*out = new(float64)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CassandraParameters.
func (in *CassandraParameters) DeepCopy() *CassandraParameters {
	if in == nil {
		return nil
	}
	out := new(CassandraParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CouchbaseObservation) DeepCopyInto(out *CouchbaseObservation) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CouchbaseObservation.
func (in *CouchbaseObservation) DeepCopy() *CouchbaseObservation {
	if in == nil {
		return nil
	}
	out := new(CouchbaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CouchbaseParameters) DeepCopyInto(out *CouchbaseParameters) {
	*out = *in
	if in.Base64PemSecretRef != nil {
		in, out := &in.Base64PemSecretRef, &out.Base64PemSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CouchbaseParameters.
func (in *CouchbaseParameters) DeepCopy() *CouchbaseParameters {
	if in == nil {
		return nil
	}
	out := new(CouchbaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchObservation) DeepCopyInto(out *ElasticsearchObservation) {
	*out = *in
	if in.CACert != nil {
		in, out := &in.CACert, &out.CACert
		*out = new(string)
		**out = **in
	}
	if in.CAPath != nil {
		in, out := &in.CAPath, &out.CAPath
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.Insecure != nil {
		in, out := &in.Insecure, &out.Insecure
		*out = new(bool)
		**out = **in
	}
	if in.TLSServerName != nil {
		in, out := &in.TLSServerName, &out.TLSServerName
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchObservation.
func (in *ElasticsearchObservation) DeepCopy() *ElasticsearchObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchParameters) DeepCopyInto(out *ElasticsearchParameters) {
	*out = *in
	if in.CACert != nil {
		in, out := &in.CACert, &out.CACert
		*out = new(string)
		**out = **in
	}
	if in.CAPath != nil {
		in, out := &in.CAPath, &out.CAPath
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.Insecure != nil {
		in, out := &in.Insecure, &out.Insecure
		*out = new(bool)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.TLSServerName != nil {
		in, out := &in.TLSServerName, &out.TLSServerName
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchParameters.
func (in *ElasticsearchParameters) DeepCopy() *ElasticsearchParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HanaObservation) DeepCopyInto(out *HanaObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HanaObservation.
func (in *HanaObservation) DeepCopy() *HanaObservation {
	if in == nil {
		return nil
	}
	out := new(HanaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HanaParameters) DeepCopyInto(out *HanaParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HanaParameters.
func (in *HanaParameters) DeepCopy() *HanaParameters {
	if in == nil {
		return nil
	}
	out := new(HanaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InfluxdbObservation) DeepCopyInto(out *InfluxdbObservation) {
	*out = *in
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InfluxdbObservation.
func (in *InfluxdbObservation) DeepCopy() *InfluxdbObservation {
	if in == nil {
		return nil
	}
	out := new(InfluxdbObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InfluxdbParameters) DeepCopyInto(out *InfluxdbParameters) {
	*out = *in
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.PemBundleSecretRef != nil {
		in, out := &in.PemBundleSecretRef, &out.PemBundleSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PemJSONSecretRef != nil {
		in, out := &in.PemJSONSecretRef, &out.PemJSONSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InfluxdbParameters.
func (in *InfluxdbParameters) DeepCopy() *InfluxdbParameters {
	if in == nil {
		return nil
	}
	out := new(InfluxdbParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbObservation) DeepCopyInto(out *MongodbObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbObservation.
func (in *MongodbObservation) DeepCopy() *MongodbObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbParameters) DeepCopyInto(out *MongodbParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbParameters.
func (in *MongodbParameters) DeepCopy() *MongodbParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbatlasObservation) DeepCopyInto(out *MongodbatlasObservation) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbatlasObservation.
func (in *MongodbatlasObservation) DeepCopy() *MongodbatlasObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbatlasObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbatlasParameters) DeepCopyInto(out *MongodbatlasParameters) {
	*out = *in
	out.PrivateKeySecretRef = in.PrivateKeySecretRef
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbatlasParameters.
func (in *MongodbatlasParameters) DeepCopy() *MongodbatlasParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbatlasParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MssqlObservation) DeepCopyInto(out *MssqlObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.ContainedDB != nil {
		in, out := &in.ContainedDB, &out.ContainedDB
		*out = new(bool)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MssqlObservation.
func (in *MssqlObservation) DeepCopy() *MssqlObservation {
	if in == nil {
		return nil
	}
	out := new(MssqlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MssqlParameters) DeepCopyInto(out *MssqlParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.ContainedDB != nil {
		in, out := &in.ContainedDB, &out.ContainedDB
		*out = new(bool)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MssqlParameters.
func (in *MssqlParameters) DeepCopy() *MssqlParameters {
	if in == nil {
		return nil
	}
	out := new(MssqlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLAuroraObservation) DeepCopyInto(out *MySQLAuroraObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLAuroraObservation.
func (in *MySQLAuroraObservation) DeepCopy() *MySQLAuroraObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLAuroraObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLAuroraParameters) DeepCopyInto(out *MySQLAuroraParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLAuroraParameters.
func (in *MySQLAuroraParameters) DeepCopy() *MySQLAuroraParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLAuroraParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLLegacyObservation) DeepCopyInto(out *MySQLLegacyObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLLegacyObservation.
func (in *MySQLLegacyObservation) DeepCopy() *MySQLLegacyObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLLegacyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLLegacyParameters) DeepCopyInto(out *MySQLLegacyParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLLegacyParameters.
func (in *MySQLLegacyParameters) DeepCopy() *MySQLLegacyParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLLegacyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLObservation) DeepCopyInto(out *MySQLObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLObservation.
func (in *MySQLObservation) DeepCopy() *MySQLObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLParameters) DeepCopyInto(out *MySQLParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.TLSCA != nil {
		in, out := &in.TLSCA, &out.TLSCA
		*out = new(string)
		**out = **in
	}
	if in.TLSCertificateKeySecretRef != nil {
		in, out := &in.TLSCertificateKeySecretRef, &out.TLSCertificateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLParameters.
func (in *MySQLParameters) DeepCopy() *MySQLParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLRDSObservation) DeepCopyInto(out *MySQLRDSObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLRDSObservation.
func (in *MySQLRDSObservation) DeepCopy() *MySQLRDSObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLRDSObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLRDSParameters) DeepCopyInto(out *MySQLRDSParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLRDSParameters.
func (in *MySQLRDSParameters) DeepCopy() *MySQLRDSParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLRDSParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OracleObservation) DeepCopyInto(out *OracleObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OracleObservation.
func (in *OracleObservation) DeepCopy() *OracleObservation {
	if in == nil {
		return nil
	}
	out := new(OracleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OracleParameters) DeepCopyInto(out *OracleParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OracleParameters.
func (in *OracleParameters) DeepCopy() *OracleParameters {
	if in == nil {
		return nil
	}
	out := new(OracleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlObservation) DeepCopyInto(out *PostgresqlObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlObservation.
func (in *PostgresqlObservation) DeepCopy() *PostgresqlObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlParameters) DeepCopyInto(out *PostgresqlParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlParameters.
func (in *PostgresqlParameters) DeepCopy() *PostgresqlParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisElasticacheObservation) DeepCopyInto(out *RedisElasticacheObservation) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisElasticacheObservation.
func (in *RedisElasticacheObservation) DeepCopy() *RedisElasticacheObservation {
	if in == nil {
		return nil
	}
	out := new(RedisElasticacheObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisElasticacheParameters) DeepCopyInto(out *RedisElasticacheParameters) {
	*out = *in
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.UsernameSecretRef != nil {
		in, out := &in.UsernameSecretRef, &out.UsernameSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisElasticacheParameters.
func (in *RedisElasticacheParameters) DeepCopy() *RedisElasticacheParameters {
	if in == nil {
		return nil
	}
	out := new(RedisElasticacheParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisObservation) DeepCopyInto(out *RedisObservation) {
	*out = *in
	if in.CACert != nil {
		in, out := &in.CACert, &out.CACert
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisObservation.
func (in *RedisObservation) DeepCopy() *RedisObservation {
	if in == nil {
		return nil
	}
	out := new(RedisObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisParameters) DeepCopyInto(out *RedisParameters) {
	*out = *in
	if in.CACert != nil {
		in, out := &in.CACert, &out.CACert
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.InsecureTLS != nil {
		in, out := &in.InsecureTLS, &out.InsecureTLS
		*out = new(bool)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisParameters.
func (in *RedisParameters) DeepCopy() *RedisParameters {
	if in == nil {
		return nil
	}
	out := new(RedisParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedshiftObservation) DeepCopyInto(out *RedshiftObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedshiftObservation.
func (in *RedshiftObservation) DeepCopy() *RedshiftObservation {
	if in == nil {
		return nil
	}
	out := new(RedshiftObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedshiftParameters) DeepCopyInto(out *RedshiftParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.DisableEscaping != nil {
		in, out := &in.DisableEscaping, &out.DisableEscaping
		*out = new(bool)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedshiftParameters.
func (in *RedshiftParameters) DeepCopy() *RedshiftParameters {
	if in == nil {
		return nil
	}
	out := new(RedshiftParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConnection) DeepCopyInto(out *SecretBackendConnection) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConnection.
func (in *SecretBackendConnection) DeepCopy() *SecretBackendConnection {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConnection)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConnection) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConnectionList) DeepCopyInto(out *SecretBackendConnectionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendConnection, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConnectionList.
func (in *SecretBackendConnectionList) DeepCopy() *SecretBackendConnectionList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConnectionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendConnectionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConnectionObservation) DeepCopyInto(out *SecretBackendConnectionObservation) {
	*out = *in
	if in.AllowedRoles != nil {
		in, out := &in.AllowedRoles, &out.AllowedRoles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Cassandra != nil {
		in, out := &in.Cassandra, &out.Cassandra
		*out = make([]CassandraObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Couchbase != nil {
		in, out := &in.Couchbase, &out.Couchbase
		*out = make([]CouchbaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Elasticsearch != nil {
		in, out := &in.Elasticsearch, &out.Elasticsearch
		*out = make([]ElasticsearchObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Hana != nil {
		in, out := &in.Hana, &out.Hana
		*out = make([]HanaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Influxdb != nil {
		in, out := &in.Influxdb, &out.Influxdb
		*out = make([]InfluxdbObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongodb != nil {
		in, out := &in.Mongodb, &out.Mongodb
		*out = make([]MongodbObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongodbatlas != nil {
		in, out := &in.Mongodbatlas, &out.Mongodbatlas
		*out = make([]MongodbatlasObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mssql != nil {
		in, out := &in.Mssql, &out.Mssql
		*out = make([]MssqlObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = make([]MySQLObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLAurora != nil {
		in, out := &in.MySQLAurora, &out.MySQLAurora
		*out = make([]MySQLAuroraObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLLegacy != nil {
		in, out := &in.MySQLLegacy, &out.MySQLLegacy
		*out = make([]MySQLLegacyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLRDS != nil {
		in, out := &in.MySQLRDS, &out.MySQLRDS
		*out = make([]MySQLRDSObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Oracle != nil {
		in, out := &in.Oracle, &out.Oracle
		*out = make([]OracleObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PluginName != nil {
		in, out := &in.PluginName, &out.PluginName
		*out = new(string)
		**out = **in
	}
	if in.Postgresql != nil {
		in, out := &in.Postgresql, &out.Postgresql
		*out = make([]PostgresqlObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Redis != nil {
		in, out := &in.Redis, &out.Redis
		*out = make([]RedisObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisElasticache != nil {
		in, out := &in.RedisElasticache, &out.RedisElasticache
		*out = make([]RedisElasticacheObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Redshift != nil {
		in, out := &in.Redshift, &out.Redshift
		*out = make([]RedshiftObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RootRotationStatements != nil {
		in, out := &in.RootRotationStatements, &out.RootRotationStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Snowflake != nil {
		in, out := &in.Snowflake, &out.Snowflake
		*out = make([]SnowflakeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VerifyConnection != nil {
		in, out := &in.VerifyConnection, &out.VerifyConnection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConnectionObservation.
func (in *SecretBackendConnectionObservation) DeepCopy() *SecretBackendConnectionObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConnectionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConnectionParameters) DeepCopyInto(out *SecretBackendConnectionParameters) {
	*out = *in
	if in.AllowedRoles != nil {
		in, out := &in.AllowedRoles, &out.AllowedRoles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.Cassandra != nil {
		in, out := &in.Cassandra, &out.Cassandra
		*out = make([]CassandraParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Couchbase != nil {
		in, out := &in.Couchbase, &out.Couchbase
		*out = make([]CouchbaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Elasticsearch != nil {
		in, out := &in.Elasticsearch, &out.Elasticsearch
		*out = make([]ElasticsearchParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Hana != nil {
		in, out := &in.Hana, &out.Hana
		*out = make([]HanaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Influxdb != nil {
		in, out := &in.Influxdb, &out.Influxdb
		*out = make([]InfluxdbParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongodb != nil {
		in, out := &in.Mongodb, &out.Mongodb
		*out = make([]MongodbParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongodbatlas != nil {
		in, out := &in.Mongodbatlas, &out.Mongodbatlas
		*out = make([]MongodbatlasParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mssql != nil {
		in, out := &in.Mssql, &out.Mssql
		*out = make([]MssqlParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = make([]MySQLParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLAurora != nil {
		in, out := &in.MySQLAurora, &out.MySQLAurora
		*out = make([]MySQLAuroraParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLLegacy != nil {
		in, out := &in.MySQLLegacy, &out.MySQLLegacy
		*out = make([]MySQLLegacyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLRDS != nil {
		in, out := &in.MySQLRDS, &out.MySQLRDS
		*out = make([]MySQLRDSParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.Oracle != nil {
		in, out := &in.Oracle, &out.Oracle
		*out = make([]OracleParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PluginName != nil {
		in, out := &in.PluginName, &out.PluginName
		*out = new(string)
		**out = **in
	}
	if in.Postgresql != nil {
		in, out := &in.Postgresql, &out.Postgresql
		*out = make([]PostgresqlParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Redis != nil {
		in, out := &in.Redis, &out.Redis
		*out = make([]RedisParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisElasticache != nil {
		in, out := &in.RedisElasticache, &out.RedisElasticache
		*out = make([]RedisElasticacheParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Redshift != nil {
		in, out := &in.Redshift, &out.Redshift
		*out = make([]RedshiftParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RootRotationStatements != nil {
		in, out := &in.RootRotationStatements, &out.RootRotationStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Snowflake != nil {
		in, out := &in.Snowflake, &out.Snowflake
		*out = make([]SnowflakeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VerifyConnection != nil {
		in, out := &in.VerifyConnection, &out.VerifyConnection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConnectionParameters.
func (in *SecretBackendConnectionParameters) DeepCopy() *SecretBackendConnectionParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConnectionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConnectionSpec) DeepCopyInto(out *SecretBackendConnectionSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConnectionSpec.
func (in *SecretBackendConnectionSpec) DeepCopy() *SecretBackendConnectionSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConnectionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendConnectionStatus) DeepCopyInto(out *SecretBackendConnectionStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendConnectionStatus.
func (in *SecretBackendConnectionStatus) DeepCopy() *SecretBackendConnectionStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendConnectionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRole) DeepCopyInto(out *SecretBackendRole) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRole.
func (in *SecretBackendRole) DeepCopy() *SecretBackendRole {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRole)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRole) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleList) DeepCopyInto(out *SecretBackendRoleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretBackendRole, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleList.
func (in *SecretBackendRoleList) DeepCopy() *SecretBackendRoleList {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretBackendRoleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleObservation) DeepCopyInto(out *SecretBackendRoleObservation) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CreationStatements != nil {
		in, out := &in.CreationStatements, &out.CreationStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CredentialConfig != nil {
		in, out := &in.CredentialConfig, &out.CredentialConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CredentialType != nil {
		in, out := &in.CredentialType, &out.CredentialType
		*out = new(string)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DefaultTTL != nil {
		in, out := &in.DefaultTTL, &out.DefaultTTL
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.RenewStatements != nil {
		in, out := &in.RenewStatements, &out.RenewStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RevocationStatements != nil {
		in, out := &in.RevocationStatements, &out.RevocationStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RollbackStatements != nil {
		in, out := &in.RollbackStatements, &out.RollbackStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleObservation.
func (in *SecretBackendRoleObservation) DeepCopy() *SecretBackendRoleObservation {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleParameters) DeepCopyInto(out *SecretBackendRoleParameters) {
	*out = *in
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(string)
		**out = **in
	}
	if in.CreationStatements != nil {
		in, out := &in.CreationStatements, &out.CreationStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CredentialConfig != nil {
		in, out := &in.CredentialConfig, &out.CredentialConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CredentialType != nil {
		in, out := &in.CredentialType, &out.CredentialType
		*out = new(string)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.DefaultTTL != nil {
		in, out := &in.DefaultTTL, &out.DefaultTTL
		*out = new(float64)
		**out = **in
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(float64)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.RenewStatements != nil {
		in, out := &in.RenewStatements, &out.RenewStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RevocationStatements != nil {
		in, out := &in.RevocationStatements, &out.RevocationStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RollbackStatements != nil {
		in, out := &in.RollbackStatements, &out.RollbackStatements
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleParameters.
func (in *SecretBackendRoleParameters) DeepCopy() *SecretBackendRoleParameters {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleSpec) DeepCopyInto(out *SecretBackendRoleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleSpec.
func (in *SecretBackendRoleSpec) DeepCopy() *SecretBackendRoleSpec {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretBackendRoleStatus) DeepCopyInto(out *SecretBackendRoleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretBackendRoleStatus.
func (in *SecretBackendRoleStatus) DeepCopy() *SecretBackendRoleStatus {
	if in == nil {
		return nil
	}
	out := new(SecretBackendRoleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnowflakeObservation) DeepCopyInto(out *SnowflakeObservation) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnowflakeObservation.
func (in *SnowflakeObservation) DeepCopy() *SnowflakeObservation {
	if in == nil {
		return nil
	}
	out := new(SnowflakeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnowflakeParameters) DeepCopyInto(out *SnowflakeParameters) {
	*out = *in
	if in.ConnectionURL != nil {
		in, out := &in.ConnectionURL, &out.ConnectionURL
		*out = new(string)
		**out = **in
	}
	if in.MaxConnectionLifetime != nil {
		in, out := &in.MaxConnectionLifetime, &out.MaxConnectionLifetime
		*out = new(float64)
		**out = **in
	}
	if in.MaxIdleConnections != nil {
		in, out := &in.MaxIdleConnections, &out.MaxIdleConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxOpenConnections != nil {
		in, out := &in.MaxOpenConnections, &out.MaxOpenConnections
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnowflakeParameters.
func (in *SnowflakeParameters) DeepCopy() *SnowflakeParameters {
	if in == nil {
		return nil
	}
	out := new(SnowflakeParameters)
	in.DeepCopyInto(out)
	return out
}
